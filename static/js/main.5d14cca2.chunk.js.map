{"version":3,"sources":["components/Container.js","components/Row.js","components/Column.js","components/Card.js","components/SearchBox.js","components/MovieInformation.js","utils/API.js","components/ImdbContainer.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","children","Row","Column","size","split","map","join","Card","heading","SearchBox","htmlFor","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","MovieInformation","alt","title","src","style","margin","director","genre","released","search","query","axios","get","ImdbContainer","state","result","searchMovies","API","then","res","setState","data","catch","err","console","log","event","target","preventDefault","this","Title","Poster","Director","Genre","Released","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wQASeA,MAPf,SAAmBC,GACjB,OAAO,yBAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAOF,EAAMG,WCG5DC,MAJf,SAAaJ,GACT,OAAO,yBAAKC,UAAW,mCAAoCD,EAAMG,WCYtDE,MAbf,SAAgBL,GACZ,IAAMM,EAAON,EAAMM,KAAKC,MACpB,KAAKC,IAAI,SAAAF,GAAI,MAAI,OAASA,IAAMG,KAAK,KAErC,OACI,yBAAKR,UAAWK,GACXN,EAAMG,WCKRO,MAXf,SAAcV,GACV,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,eACX,4BAAKD,EAAMW,UAEf,yBAAKV,UAAU,aAAaD,EAAMG,YCgB/BS,MAtBf,SAAmBZ,GACf,OACI,8BACI,yBAAKC,UAAU,SACX,2BAAOY,QAAQ,UAAf,iBACA,2BACAC,SAAUd,EAAMe,kBAChBC,MAAOhB,EAAMgB,MACbC,KAAK,SACLC,KAAK,OACLjB,UAAU,QACVkB,YAAY,oBACZC,GAAG,WAEH,4BAAQC,QAASrB,EAAMsB,iBAAkBrB,UAAU,mBAAnD,aCDDsB,MAbf,SAA0BvB,GACtB,OACI,yBAAKC,UAAU,eACX,yBAAKuB,IAAKxB,EAAMyB,MAAOxB,UAAU,YAAYyB,IAAK1B,EAAM0B,IAAKC,MAAO,CAAEC,OAAQ,eAC9E,0CAAgB5B,EAAM6B,SAAtB,KACA,sCAAY7B,EAAM8B,OAClB,yCAAe9B,EAAM+B,Y,iBCJlB,GACXC,OAAQ,SAASC,GACb,OAAOC,IAAMC,IALL,8BAKmBF,EAJpB,qBCyEEG,E,2MAjEbC,MAAQ,CACJC,OAAQ,GACRN,OAAQ,I,EAQhBO,aAAe,SAAAN,GACXO,EAAIR,OAAOC,GACVQ,KAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEL,OAAQI,EAAIE,SACxCC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,M,EAG9B/B,kBAAoB,SAAAkC,GAChB,IAAMjC,EAAQiC,EAAMC,OAAOlC,MACrBC,EAAOgC,EAAMC,OAAOjC,KAC1B,EAAK0B,SAAL,eACK1B,EAAOD,K,EAIhBM,iBAAmB,SAAA2B,GACfA,EAAME,iBACN,EAAKZ,aAAa,EAAKF,MAAML,S,mFAnB7BoB,KAAKb,aAAa,e,+BAuBhB,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAQjC,KAAK,QACT,kBAAC,EAAD,CACAK,QAASyC,KAAKf,MAAMC,OAAOe,OAAS,iBAC/BD,KAAKf,MAAMC,OAAOe,MACf,kBAAC,EAAD,CACA5B,MAAO2B,KAAKf,MAAMC,OAAOe,MACzB3B,IAAK0B,KAAKf,MAAMC,OAAOgB,OACvBzB,SAAUuB,KAAKf,MAAMC,OAAOiB,SAC5BzB,MAAOsB,KAAKf,MAAMC,OAAOkB,MACzBzB,SAAUqB,KAAKf,MAAMC,OAAOmB,WAG5B,4CAIZ,kBAAC,EAAD,CAAQnD,KAAK,QACT,kBAAC,EAAD,CAAMK,QAAQ,UACV,kBAAC,EAAD,CACCK,MAAOoC,KAAKf,MAAML,OAClBjB,kBAAmBqC,KAAKrC,kBACxBO,iBAAkB8B,KAAK9B,2B,GAvDtBoC,aCDbC,MALf,WACE,OAAQ,kBAAC,EAAD,OCQUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.5d14cca2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\n\r\n\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n    return <div className={'row${props.fluid ? \"-fluid : \"\"'}>{props.children}</div>;\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\nfunction Column(props) {\r\n    const size = props.size.split(\r\n        \" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n        return (\r\n            <div className={size}>\r\n                {props.children}\r\n                </div>\r\n\r\n       );\r\n    \r\n}\r\n\r\nexport default Column;","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card text-center\">\r\n            <div className=\"card-header\">\r\n                <h4>{props.heading}</h4>\r\n            </div>\r\n            <div className=\"card-body\">{props.children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction SearchBox(props) {\r\n    return (\r\n        <form>\r\n            <div className=\"forms\">\r\n                <label htmlFor=\"search\">Search Movies</label>\r\n                <input \r\n                onChange={props.handleInputChange}\r\n                value={props.value}\r\n                name=\"search\"\r\n                type=\"text\"\r\n                className=\"forms\"\r\n                placeholder=\"Browse for Movies\"\r\n                id=\"search\"\r\n                />\r\n                <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\r\n                    Search\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nfunction MovieInformation(props) {\r\n    return (\r\n        <div className=\"text-center\">\r\n            <img alt={props.title} className=\"img-fluid\" src={props.src} style={{ margin: \"12px auto\"}} />\r\n            <h4>Directors: {props.director} </h4>\r\n            <h4>Genre: {props.genre}</h4>\r\n            <h4>REleased: {props.released}</h4>\r\n            </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default MovieInformation;","import axios from \"axios\";\r\nconst BASEURL = \"https://www.omdbapi.com/?t=\";\r\nconst APIKEY = \"&apikey=trilogy\";\r\n\r\nexport default { \r\n    search: function(query) {\r\n        return axios.get(BASEURL + query + APIKEY)\r\n    }\r\n};","import React, { Component } from \"react\";\r\nimport Container from \"./Container\";\r\nimport Row from \"./Row\";\r\nimport Column from \"./Column\";\r\nimport Card from \"./Card\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport MovieInformation from \"./MovieInformation\";\r\nimport API from \"../utils/API\";\r\n\r\nclass ImdbContainer extends Component {\r\n    state = {\r\n        result: {},\r\n        search: \"\"\r\n    \r\n};\r\n\r\ncomponentDidMount() {\r\n    this.searchMovies(\"Tommy Boy\");\r\n}\r\n\r\nsearchMovies = query => {\r\n    API.search(query)\r\n    .then(res => this.setState({ result: res.data}))\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nhandleInputChange = event => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    this.setState({\r\n        [name]: value\r\n    });\r\n};\r\n\r\nhandleFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.searchMovies(this.state.search);\r\n  };\r\n\r\n  render() {\r\n      return (\r\n          <Container>\r\n              <Row>\r\n                  <Column size=\"md-4\">\r\n                      <Card \r\n                      heading={this.state.result.Title || \"Browse Movies\"} >\r\n                          {this.state.result.Title ? (\r\n                              <MovieInformation\r\n                              title={this.state.result.Title}\r\n                              src={this.state.result.Poster}\r\n                              director={this.state.result.Director}\r\n                              genre={this.state.result.Genre}\r\n                              released={this.state.result.Released}\r\n                        />\r\n                          ) : (\r\n                              <h2>No Results</h2>\r\n                          )}\r\n                      </Card>\r\n                  </Column>\r\n                  <Column size=\"md-6\">\r\n                      <Card heading=\"Search\">\r\n                          <SearchBox\r\n                           value={this.state.search}\r\n                           handleInputChange={this.handleInputChange}\r\n                           handleFormSubmit={this.handleFormSubmit}\r\n                         />\r\n\r\n                      </Card>\r\n                  </Column>\r\n              </Row>\r\n          </Container>\r\n      );\r\n                          }\r\n  }\r\n\r\n  export default ImdbContainer;","import React from 'react';\nimport ImdbContainer from './components/ImdbContainer';\n\nfunction App() {\n  return  <ImdbContainer />;\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}